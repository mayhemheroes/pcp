#
# Common shell routines for testing Redis (cluster)
#
# Copyright (c) 2021 Red Hat.
#

# wait for local redis on given port
_wait_for_redis()
{
    __port=6379 # default
    [ $# -eq 1 ] && __port=$1
    __n=1
    while [ $__n -lt 10 ]; do
	redis-cli -p $__port ping >/dev/null 2>&1 && return 0
	pmsleep 0.25
	__n=`expr $__n + 1`
    done
    echo _wait_for_redis on port $__port FAILED
    return 1
}

_redis_cluster_3nodes_start()
{
	echo "== Start a Redis cluster"
	echo "== Start node 1"
	redis_node1_port=`_find_free_port`
	redis-server --port $redis_node1_port --save "" --cluster-enabled yes --cluster-config-file $tmp.redis1.cluster.conf > $tmp.redis1.out 2>&1 &
	__redis_node1_pid=$!
	echo "redis_node1_port=$redis_node1_port" >>$seq.full
	echo "__redis_node1_pid=$__redis_node1_pid" >>$seq.full
	_wait_for_redis $redis_node1_port
	redis-cli -p $redis_node1_port ping
	redis-cli -p $redis_node1_port flushall

	echo "== Start node 2"
	redis_node2_port=`_find_free_port`
	redis-server --port $redis_node2_port --save "" --cluster-enabled yes --cluster-config-file $tmp.redis2.cluster.conf > $tmp.redis2.out 2>&1 &
	__redis_node2_pid=$!
	echo "redis_node2_port=$redis_node2_port" >>$seq.full
	echo "__redis_node2_pid=$__redis_node2_pid" >>$seq.full
	_wait_for_redis $redis_node2_port
	redis-cli -p $redis_node2_port ping
	redis-cli -p $redis_node2_port flushall

	echo "== Start node 3"
	redis_node3_port=`_find_free_port`
	redis-server --port $redis_node3_port --save "" --cluster-enabled yes --cluster-config-file $tmp.redis3.cluster.conf > $tmp.redis3.out 2>&1 &
	__redis_node3_pid=$!
	echo "redis_node3_port=$redis_node3_port" >>$seq.full
	echo "__redis_node3_pid=$__redis_node3_pid" >>$seq.full
	_wait_for_redis $redis_node3_port
	redis-cli -p $redis_node3_port ping
	redis-cli -p $redis_node3_port flushall

	echo
	echo "== Create Redis cluster"
	# --cluster-yes is not supported in Redis 5.0.3 (RHEL 7), use workaround instead
	yes yes | redis-cli --cluster create 127.0.0.1:$redis_node1_port 127.0.0.1:$redis_node2_port 127.0.0.1:$redis_node3_port \
	| sed 's/\x1b\[[0-9;]*m//g' \
	| tee -a $seq.full \
	| grep '[OK]'

	echo
	echo "== Wait for cluster to get ready"
	for __i in `seq 1 30`
	do
	if redis-cli -p $redis_node1_port cluster info | grep -q "cluster_state:ok" && echo "OK"; then
		__cluster_ready=yes
		break
	fi
	pmsleep 2
	done
	if [ -z "$__cluster_ready" ]; then
	echo "Redis cluster didn't get ready in 60 seconds:"
	echo redis-cli -p $redis_node1_port cluster info
	redis-cli -p $redis_node1_port cluster info
	exit 1
	fi

	echo
	echo "== Cluster status"
	redis-cli -p $redis_node1_port cluster info | tr -d '\r' | grep -E "cluster_(state|known_nodes|size)"
}

_redis_cluster_3nodes_stop()
{
	printf "\n== Redis Node 1 keys:\n" >> $seq.full
	redis-cli -p $redis_node1_port keys '*' >> $seq.full
	printf "\n== Redis Node 1 log:\n" >> $seq.full
	cat $tmp.redis1.out >> $seq.full

	printf "\n== Redis Node 2 keys:\n" >> $seq.full
	redis-cli -p $redis_node2_port keys '*' >> $seq.full
	printf "\n== Redis Node 2 log:\n" >> $seq.full
	cat $tmp.redis2.out >> $seq.full

	printf "\n== Redis Node 3 keys:\n" >> $seq.full
	redis-cli -p $redis_node3_port keys '*' >> $seq.full
	printf "\n== Redis Node 3 log:\n" >> $seq.full
	cat $tmp.redis3.out >> $seq.full

	[ -n "$redis_node1_port" ] && redis-cli -p $redis_node1_port shutdown
	[ -n "$redis_node2_port" ] && redis-cli -p $redis_node2_port shutdown
	[ -n "$redis_node3_port" ] && redis-cli -p $redis_node3_port shutdown
}
